const axios = require('axios');
const { ClientRequest } = require('http');
const https = require('https');

const agent = new https.Agent({
    rejectUnauthorized: false
});



exports.getWebsite = async (req, res) => {
    try {
        const resp = await axios.get(req.query.url, {timeout: 1000, httpsAgent: agent});
        return res.status(resp.status).send(console.log(resp.status))
    } catch (error) {
        if (error.code != "ENOTFOUND") {
            return res.status(error.response.status).send(console.log(error.response.status))
        } if (error.code == "ECONNABORTED") {
            return res.status(408).send(console.log("Request took too long."))
        } else {
            return res.status(500).send(console.log("Something went wrong with the request."))
        }
    }
    
}

exports.getPHPInfo = (req,res) => {
    let phpinfophp = (req.query.url + "/phpinfo.php");
    let testphp = (req.query.url + "/test.php");
    let infophp = (req.query.url + "/info.php");
    let phpinfo = (req.query.url + "/phpinfo");

    Promise.allSettled([
        axios.get(phpinfophp, {timeout: 1000, httpsAgent: agent}),
        axios.get(testphp, {timeout: 1000, httpsAgent: agent}),
        axios.get(infophp, {timeout: 1000, httpsAgent: agent}),
        axios.get(phpinfo, {timeout: 1000, httpsAgent: agent}),

    ]).then((results) => {
        for (let index = 0; index < results.length; index++) {
            const result = results[index];
            if (result.value != undefined && result.value.status == 200 && result.value.data.match(/\WPHP Version\W/)) {
                return res.status(result.value.status).send(console.log(result.value.status))
            } else{
                if (result.reason.code == "ECONNABORTED") {
                    return res.status(408).send(console.log("Request took too long."))
                } if (result.reason.code == "ENOTFOUND") {
                    return res.status(500).send(console.log("Something went wrong with the request.")) 
                } else {
                    return res.status(result.reason.response.status).send(console.log(result.reason.response.status + " " + result.reason.response.statusText))
                }
            }
            
        }
      })

}


exports.getGitConfig = (req, res) => {
    getRequest("/.git/config",req,res)
    
}

exports.getDockerCompose = (req, res) => {
    getRequest("/docker-compose.yml",req,res) 
}

async function getRequest(type,req,res) {
        try {
            const resp = await axios.get(req.query.url + type, {timeout: 1000, httpsAgent: agent});
            return res.status(resp.status).send(console.log(resp.status))
        } catch (error) {
            if (error.code == "ENOTFOUND") {
                return res.status(500).send(console.log("Something went wrong with the request.")) 
            } if (error.code == "ECONNABORTED") {
                return res.status(408).send(console.log("Request took too long."))
            } else {
                return res.status(error.response.status).send(console.log(error.response.status))
            }
        }
}