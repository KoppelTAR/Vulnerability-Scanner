const express = require("express");
const router = express.Router();
const mainController = require("../controllers/mainController");

router.get("/website", mainController.getWebsite); // Get website (if returns as 500 don't do go through other requests since they will all 404)

router.get("/phpinfo", mainController.getPhpInfo); // Checks possible locations for phpinfo

router.get("/gitconfig", mainController.getGitConfig); // Get .git config of website

router.get("/dockercompose", mainController.getDockerCompose); // Get docker-compose.yml of website

router.get("/laravellog", mainController.getLaravelLog); // Get laravel.log of website

router.get("/wpdebuglog", mainController.getWPDebugLog); // Get WordPress debug.log of website

router.get("/wpconfig", mainController.getWPConfig); // Check possible locations for wp-config.php

router.get("/apachestatus", mainController.getApacheStatus); // Get apache-status of website

router.get("/symfony", mainController.getSymfonyDatabaseConfig); // Get symfony databases.yml of website

router.get("/lfigen", mainController.getLocalFileInclusionGeneric); // Get etc/passwd of website

router.get("/lfidupe", mainController.getLocalFileInclusionDuplicator); // Get etc/passwd of website through outdated Duplicator plugin

router.get("/errorlog", mainController.getErrorLog); // Checks possible locations for error log

router.get("/wplogin", mainController.getWPLogin); // get /wp-login.php of website

router.get("/phpmyadmin", mainController.getPhpMyAdmin); // Check possible locations for phpMyAdmin setup

router.get("/jckeditor", mainController.getJCKEditor); // Check if SQL injection is possible due to outdated JCK editor

router.get("/joomlaconfig", mainController.getJoomlaConfig); // get Configuration.php-dist of website

router.get("/sqldump", mainController.getSQLDump); // Check possible locations for SQL dump

router.get("/backup", mainController.getBackup); // Check possible locations for website backup


/*

TODO

Display vulnerability descriptions in the frontend (Either sending it from backend or hardcoding it in the frontend)
Display recommended remedy for vulnerability
Sort displayed vulnerabilites so that the exposed vulnerabilites come first then timeouts/inconclusives and then not founds
Color code cards to indicate if the vulnerability was found, timedout or not found
General frontend fixes (footer?)
Add .env to project and use it to store backend url (MAYBE)
Allow user to input url without a protocol (IF POSSIBLE)

*/

module.exports = router;
